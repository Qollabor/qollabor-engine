##################################################################################################
##                                                                                              ##
## Default configurations to use                                                                ##
##   - Microsoft SQL Server for storing events                                                  ##
##   - Microsoft SQL Server for building up projections database for case queries               ##
##                                                                                              ##
##  Some of the settings can be passed as environment variables                                 ##
##                                                                                              ##
##################################################################################################
akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 10s

  actor {
    serialize-messages = on

    serializers {
      qollabor_serializer = "org.qollabor.akka.actor.serialization.QollaborSerializer"
    }

    serialization-bindings {
      "org.qollabor.akka.actor.serialization.QollaborSerializable" = qollabor_serializer
    }
  }
  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      # Enable the line below to automatically start the snapshot-store when the actorsystem is started
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}

qollabor {
  # Engine wide platform settings
  platform {
    # Platform has owners that are allowed to create/disable/enable tenants
    #  This property specifies the set of user-id's that are owners
    #  This array may not be empty.
    owners = ["admin"]
    owners = ${?QOLLABOR_PLATFORM_OWNERS}
    # Default tenant will be used when a user does not provide the tenant as a parameter to
    #  the API call (e.g. in StartCase). When the user is member of only one tenant,
    #  then that tenant will be submitted along with the StartCase command.
    #  If the user belongs to multiple tenants, then this default-tenant option will be passed.
    default-tenant = "world"
    default-tenant = ${?QOLLABOR_PLATFORM_DEFAULT_TENANT}
    # bootstrap-file holds a reference to a json or yaml file that has default tenant information.
    #  E.g., tenant name, tenant owners, tenant users can be given in this file.
    #  During launch of the case engine, the file will be scanned and a special CreateTenant command is sent
    #  into the system, thereby setting up a default tenant with owners and users.
    #  The bootstrap configuration will search for this file, and try to parse it into a standard akka Config
    #  object.
    # If the bootstrap-file property is not filled, the system will search for a file that holds
    #  the default tenant name plus either a .conf, .json, .yml or .yaml extension.
    #  In case of tenant 'world', the system would search for existence in the following order:
    #  - 'world.conf'
    #  - 'world.json'
    #  - 'world.yml'
    #  - 'world.yaml'
    # If none of these files are found, the bootstrap attempt will be skipped.
    bootstrap-file = "world.conf"
  }

  api {
    bindhost = "localhost"
    bindport = 2027

    security {
      # configuration settings for OpenID Connect
      oidc {
        connect-url = "http://localhost:5556/dex/.well-known/openid-configuration"
        connect-url = ${?QOLLABOR_OIDC_CONNECT_URL}
        token-url = "http://127.0.0.1:5556/dex/token"
        token-url = ${?QOLLABOR_OIDC_TOKEN_URL}
        key-url = "http://127.0.0.1:5556/dex/keys"
        key-url = ${?QOLLABOR_OIDC_KEY_URL}
        authorization-url = "http://127.0.0.1:5556/dex/auth"
        authorization-url = ${?QOLLABOR_OIDC_AUTHORIZATION_URL}
        issuer = "http://localhost:5556/dex"
        issuer = ${?QOLLABOR_OIDC_ISSUER}
      }

      # The subject of a valid JWT token is used to query the corresponging registered platform user from the database.
      # These identities can be cached to avoid repeated queries and thereby improve throughput times.
      # The size of the cache can be set here, it defaults to 1000
      # The cache is disabled if size is 0 or a negative number.
      identity.cache.size = 1000

      ###################################################################################################
      ##                                                                                               ##
      ## Fill this setting to true to allow developers to access engine events without authentication  ##
      ##                                                                                               ##
      ##   WARNING - Enabling opens up the full engine in read-only mode for anyone to access          ##
      ##                                                                                               ##
      ###################################################################################################
      debug.events.open = false
      debug.events.open = ${?QOLLABOR_DEBUG_EVENTS}
    }
  }

  # The case engine supports various ways to list, load and deploy case definitions.
  # The below settings can be used to configure various options; default settings use
  # a file based definition provider.
  # An alternative is to use the StartCaseDefinitionProvider, in which
  # case definitions must be passed along with the StartCase REST API itself.
  #
  # The case engine reads definitions as XML files from disk and/or the classpath.
  # The files are cached in-memory, based on their lastModified timestamp
  # (i.e., if you change a file on disk, the engine will reload it into the cache).
  # By default, the engine will read from the configured location. If the definitions file cannot be found
  # in this location, the engine will try to load it as a resource from the classpath, hence enabling to ship
  # fixed definitions in a jar file.
  definitions {
    # Default provider is based on reading/writing from the local file system
    provider = "org.qollabor.cmmn.repository.file.FileBasedDefinitionProvider"
    location = "./definitions"
    location =  ${?QOLLABOR_CMMN_DEFINITIONS_PATH}
    cache {
      size = 100
    }

    # Use the below provider to start cases while passing the definition along the StartCase call
    #  Note that the StartCaseDefinitionProvider also makes use of the same cache settings
    # provider = "org.qollabor.cmmn.repository.StartCaseDefinitionProvider"
  }

  actor {
    # the seconds of idle time after which a case actor is removed from akka memory
    # if the case has not received new commands after the specified number of seconds,
    # the case engine will ask akka to remove the case from memory to avoid memory leaks.
    idle-period = 600

    # If debug is true, then all StartCase commands by default will run in debug mode,
    #  unless specified otherwise in the command
    debug = false
  }

  timer-service {
    # The number of seconds that the TimerService should wait to persist it's snapshot
    # after a timer has occurred or has been canceled.
    # Note: for setting timers always immediately snapshots are stored
    persist-delay = 60
  }

  # This setting tells qollabor which journal to use for reading events.
  #  If omitted, qollabor will try to guess the read journal, based on the akka settings
  read-journal = "jdbc-read-journal"

  query-db {
    profile = "slick.jdbc.SQLServerProfile$"
    profile = ${?PROJECTION_DB_PROFILE}
    db {
      driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
      driver =  ${?PROJECTION_DB_DRIVER}
      ###################################################################
      ##                                                               ##
      ##  Database schema 'qollabor-query' must be created manually    ##
      ##                                                               ##
      ###################################################################

      ###################################################################
      ##                                                               ##
      ##  MAKE SURE TO FILL USER AND PASSWORD FOR CONNECTION           ##
      ##                                                               ##
      ###################################################################
      user = ""
      user =  ${?PROJECTION_DB_USER}
      password = ""
      password =  ${?PROJECTION_DB_PASSWORD}
      numThreads = 10
      connectionTimeout = 5000
      validationTimeout = 5000

      url = "jdbc:sqlserver://localhost:1433;DatabaseName=qollabor-query;"
      url =  ${?PROJECTION_DB_URL}
    }
  }
}


#######################################################################################
##                                                                                   ##
##  Below are settings for Akka Event Storage for Microsoft SQL Server               ##
##                                                                                   ##
##   As of now, the database schema 'qollabor-eventstore' must be created manually   ##
##                                                                                   ##
#######################################################################################
akka-persistence-jdbc {
  database-provider-fqcn = "org.qollabor.service.db.events.EventDatabaseProvider"
  shared-databases {
    slick {
      profile ="slick.jdbc.SQLServerProfile$"
      profile = ${?EVENT_DB_PROFILE}
      db {
        connectionPool = disabled
        driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
        driver = ${?EVENT_DB_DRIVER}
        url = "jdbc:sqlserver://localhost:1433;DatabaseName=qollabor-eventstore;"
        url = ${?EVENT_DB_URL}
        # User name to connect, update and query
        user = ""
        user = ${?EVENT_DB_USER}
        password = ""
        password = ${?EVENT_DB_PASSWORD}
        numThreads = 5
        connectionTimeout = 5000
        validationTimeout = 5000
        maxConnections = 5
        minConnections = 1
      }
    }
  }
}

jdbc-journal {
  use-shared-db = "slick"

  event-adapters {
    tagging = "org.qollabor.akka.actor.tagging.CaseTaggingEventAdapter"
  }

  event-adapter-bindings {
    "org.qollabor.akka.actor.event.ModelEvent" = tagging
  }
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  use-shared-db = "slick"
}